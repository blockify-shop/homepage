{
  "version": 3,
  "sources": ["browser-route-module:/Users/joshcs/Documents/GitHub/blockify/app/routes/index.tsx?browser", "../../../app/routes/index.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/joshcs/Documents/GitHub/blockify/app/routes/index.tsx\";", "import type { MetaFunction, LoaderFunction } from \"remix\";\nimport { useLoaderData, json, Link } from \"remix\";\n\ntype IndexData = {\n  resources: Array<{ name: string; url: string }>;\n  demos: Array<{ name: string; to: string }>;\n};\n\n// Loaders provide data to components and are only ever called on the server, so\n// you can connect to a database or run any server side code you want right next\n// to the component that renders it.\n// https://remix.run/api/conventions#loader\nexport let loader: LoaderFunction = () => {\n  let data: IndexData = {\n    resources: [\n      {\n        name: \"visit our GitHub\",\n        url: \"https://github.com/jcstein/blockify\",\n      },\n      {\n        name: \"Discord \u27A1\uFE0F join our community\",\n        url: \"https://discord.gg\",\n      },\n    ],\n    demos: [\n      {\n        to: \"/about\",\n        name: \"about blockify\",\n      },\n    ],\n  };\n\n  // https://remix.run/api/remix#json\n  return json(data);\n};\n\n// https://remix.run/api/conventions#meta\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"blockify\",\n    description: \"welcome to blockify!\",\n  };\n};\n\n// https://remix.run/guides/routing#index-routes\nexport default function Index() {\n  let data = useLoaderData<IndexData>();\n\n  return (\n    <div className=\"remix__page\">\n      <main>\n        <h2>welcome to blockify!</h2>\n        <p>we're building eCommerce solutions on the Blockchain</p>\n      </main>\n      <aside>\n        <h2>Resources</h2>\n        <ul>\n          {data.resources.map((resource) => (\n            <li key={resource.url} className=\"remix__page__resource\">\n              <a href={resource.url}>{resource.name}</a>\n            </li>\n          ))}\n        </ul>\n        <h2>More</h2>\n        <ul>\n          {data.demos.map((demo) => (\n            <li key={demo.to} className=\"remix__page__resource\">\n              <Link to={demo.to} prefetch=\"intent\">\n                {demo.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </aside>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;AAAA;;;ACAA;AAqCO,IAAI,OAAqB,MAAM;AACpC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,aAAa;AAAA;AAAA;AAKF,iBAAiB;AAC9B,MAAI,OAAO;AAEX,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,QAAD,MACE,oCAAC,MAAD,MAAI,yBACJ,oCAAC,KAAD,MAAG,0DAEL,oCAAC,SAAD,MACE,oCAAC,MAAD,MAAI,cACJ,oCAAC,MAAD,MACG,KAAK,UAAU,IAAI,CAAC,aACnB,oCAAC,MAAD;AAAA,IAAI,KAAK,SAAS;AAAA,IAAK,WAAU;AAAA,KAC/B,oCAAC,KAAD;AAAA,IAAG,MAAM,SAAS;AAAA,KAAM,SAAS,UAIvC,oCAAC,MAAD,MAAI,SACJ,oCAAC,MAAD,MACG,KAAK,MAAM,IAAI,CAAC,SACf,oCAAC,MAAD;AAAA,IAAI,KAAK,KAAK;AAAA,IAAI,WAAU;AAAA,KAC1B,oCAAC,MAAD;AAAA,IAAM,IAAI,KAAK;AAAA,IAAI,UAAS;AAAA,KACzB,KAAK;AAAA;",
  "names": []
}
