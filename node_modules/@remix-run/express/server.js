/**
 * @remix-run/express v1.0.6
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var stream = require('stream');
var serverRuntime = require('@remix-run/server-runtime');
var node = require('@remix-run/node');

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action, such as
 * values that are generated by Express middleware like `req.session`.
 */

/**
 * Returns a request handler for Express that serves the response using Remix.
 */
function createRequestHandler({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV
}) {
  let platform = {
    formatServerError: node.formatServerError
  };
  let handleRequest = serverRuntime.createRequestHandler(build, platform, mode);
  return async (req, res, next) => {
    try {
      let request = createRemixRequest(req);
      let loadContext = typeof getLoadContext === "function" ? getLoadContext(req, res) : undefined;
      let response = await handleRequest(request, loadContext);
      sendRemixResponse(res, response);
    } catch (error) {
      // Express doesn't support async functions, so we have to pass along the
      // error manually using next().
      next(error);
    }
  };
}
function createRemixHeaders(requestHeaders) {
  let headers = new node.Headers();

  for (let [key, values] of Object.entries(requestHeaders)) {
    if (values) {
      if (Array.isArray(values)) {
        for (const value of values) {
          headers.append(key, value);
        }
      } else {
        headers.set(key, values);
      }
    }
  }

  return headers;
}
function createRemixRequest(req) {
  let origin = `${req.protocol}://${req.get("host")}`;
  let url = new URL(req.url, origin);
  let init = {
    method: req.method,
    headers: createRemixHeaders(req.headers)
  };

  if (req.method !== "GET" && req.method !== "HEAD") {
    init.body = req.pipe(new stream.PassThrough({
      highWaterMark: 16384
    }));
  }

  return new node.Request(url.toString(), init);
}

function sendRemixResponse(res, response) {
  var _response$body;

  res.status(response.status);

  for (let [key, values] of Object.entries(response.headers.raw())) {
    for (const value of values) {
      res.append(key, value);
    }
  }

  if (Buffer.isBuffer(response.body)) {
    res.end(response.body);
  } else if ((_response$body = response.body) !== null && _response$body !== void 0 && _response$body.pipe) {
    response.body.pipe(res);
  } else {
    res.end();
  }
}

exports.createRemixHeaders = createRemixHeaders;
exports.createRemixRequest = createRemixRequest;
exports.createRequestHandler = createRequestHandler;
