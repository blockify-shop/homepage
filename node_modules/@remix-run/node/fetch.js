/**
 * @remix-run/node v1.0.6
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var nodeFetch = require('node-fetch');
var formData = require('./form-data.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var nodeFetch__default = /*#__PURE__*/_interopDefaultLegacy(nodeFetch);

class Request extends nodeFetch.Request {
  constructor(input, init) {
    super(input, init);
  }

  async formData() {
    let body = await this.clone().text();
    return new formData.RemixFormData(body);
  }

}
/**
 * A `fetch` function for node that matches the web Fetch API. Based on
 * `node-fetch`.
 *
 * @see https://github.com/node-fetch/node-fetch
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 */

function fetch(input, init) {
  // Default to { compress: false } so responses can be proxied through more
  // easily in loaders. Otherwise the response stream encoding will not match
  // the Content-Encoding response header.
  return nodeFetch__default["default"](input, {
    compress: false,
    ...init
  });
}

Object.defineProperty(exports, 'Headers', {
  enumerable: true,
  get: function () { return nodeFetch.Headers; }
});
Object.defineProperty(exports, 'Response', {
  enumerable: true,
  get: function () { return nodeFetch.Response; }
});
exports.Request = Request;
exports.fetch = fetch;
