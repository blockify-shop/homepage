/**
 * @remix-run/vercel v1.0.6
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var serverRuntime = require('@remix-run/server-runtime');
var node = require('@remix-run/node');

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */

/**
 * Returns a request handler for Vercel's Node.js runtime that serves the
 * response using Remix.
 */
function createRequestHandler({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV
}) {
  let platform = {
    formatServerError: node.formatServerError
  };
  let handleRequest = serverRuntime.createRequestHandler(build, platform, mode);
  return async (req, res) => {
    let request = createRemixRequest(req);
    let loadContext = typeof getLoadContext === "function" ? getLoadContext(req, res) : undefined;
    let response = await handleRequest(request, loadContext);
    sendRemixResponse(res, response);
  };
}
function createRemixHeaders(requestHeaders) {
  let headers = new node.Headers();

  for (let key in requestHeaders) {
    let header = requestHeaders[key]; // set-cookie is an array (maybe others)

    if (Array.isArray(header)) {
      for (let value of header) {
        headers.append(key, value);
      }
    } else {
      headers.append(key, header);
    }
  }

  return headers;
}
function createRemixRequest(req) {
  let host = req.headers["x-forwarded-host"] || req.headers["host"]; // doesn't seem to be available on their req object!

  let protocol = req.headers["x-forwarded-proto"] || "https";
  let url = new URL(req.url, `${protocol}://${host}`);
  let init = {
    method: req.method,
    headers: createRemixHeaders(req.headers)
  };

  if (req.method !== "GET" && req.method !== "HEAD") {
    init.body = req;
  }

  return new node.Request(url.toString(), init);
}

function sendRemixResponse(res, response) {
  var _response$body;

  let arrays = new Map();

  for (let [key, value] of response.headers.entries()) {
    if (arrays.has(key)) {
      let newValue = arrays.get(key).concat(value);
      res.setHeader(key, newValue);
      arrays.set(key, newValue);
    } else {
      res.setHeader(key, value);
      arrays.set(key, [value]);
    }
  }

  res.writeHead(response.status, response.headers.raw());

  if (Buffer.isBuffer(response.body)) {
    return res.end(response.body);
  } else if ((_response$body = response.body) !== null && _response$body !== void 0 && _response$body.pipe) {
    return res.end(response.body.pipe(res));
  }

  return res.end();
}

exports.createRemixHeaders = createRemixHeaders;
exports.createRemixRequest = createRemixRequest;
exports.createRequestHandler = createRequestHandler;
