import type { VercelRequest, VercelResponse } from "@vercel/node";
import type { AppLoadContext, ServerBuild } from "@remix-run/server-runtime";
import { Headers as NodeHeaders, Request as NodeRequest } from "@remix-run/node";
/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */
export interface GetLoadContextFunction {
    (req: VercelRequest, res: VercelResponse): AppLoadContext;
}
export declare type RequestHandler = ReturnType<typeof createRequestHandler>;
/**
 * Returns a request handler for Vercel's Node.js runtime that serves the
 * response using Remix.
 */
export declare function createRequestHandler({ build, getLoadContext, mode }: {
    build: ServerBuild;
    getLoadContext?: GetLoadContextFunction;
    mode?: string;
}): (req: VercelRequest, res: VercelResponse) => Promise<void>;
export declare function createRemixHeaders(requestHeaders: VercelRequest["headers"]): NodeHeaders;
export declare function createRemixRequest(req: VercelRequest): NodeRequest;
