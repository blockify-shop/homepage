/**
 * @remix-run/server-runtime v1.0.6
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var cookies = require('../cookies.js');
var sessions = require('../sessions.js');

/**
 * Creates and returns a SessionStorage object that stores all session data
 * directly in the session cookie itself.
 *
 * This has the advantage that no database or other backend services are
 * needed, and can help to simplify some load-balanced scenarios. However, it
 * also has the limitation that serialized session data may not exceed the
 * browser's maximum cookie size. Trade-offs!
 */
function createCookieSessionStorage({
  cookie: cookieArg
} = {}) {
  let cookie = cookies.isCookie(cookieArg) ? cookieArg : cookies.createCookie(cookieArg && cookieArg.name || "__session", cookieArg);
  sessions.warnOnceAboutSigningSessionCookie(cookie);
  return {
    async getSession(cookieHeader, options) {
      return sessions.createSession(cookieHeader && (await cookie.parse(cookieHeader, options)) || {});
    },

    async commitSession(session, options) {
      return cookie.serialize(session.data, options);
    },

    async destroySession(_session, options) {
      return cookie.serialize("", { ...options,
        expires: new Date(0)
      });
    }

  };
}

exports.createCookieSessionStorage = createCookieSessionStorage;
