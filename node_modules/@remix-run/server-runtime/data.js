/**
 * @remix-run/server-runtime v1.0.6
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var responses = require('./responses.js');

/**
 * An object of arbitrary for route loaders and actions provided by the
 * server's `getLoadContext()` function.
 */

async function loadRouteData(build, routeId, request, context, params) {
  let routeModule = build.routes[routeId].module;

  if (!routeModule.loader) {
    return Promise.resolve(responses.json(null));
  }

  let result;

  try {
    result = await routeModule.loader({
      request,
      context,
      params
    });
  } catch (error) {
    if (!isResponse(error)) {
      throw error;
    }

    if (!isRedirectResponse(error)) {
      error.headers.set("X-Remix-Catch", "yes");
    }

    result = error;
  }

  if (result === undefined) {
    throw new Error(`You defined a loader for route "${routeId}" but didn't return ` + `anything from your \`loader\` function. Please return a value or \`null\`.`);
  }

  return isResponse(result) ? result : responses.json(result);
}
async function callRouteAction(build, routeId, request, context, params) {
  let routeModule = build.routes[routeId].module;

  if (!routeModule.action) {
    throw new Error(`You made a ${request.method} request to ${request.url} but did not provide ` + `an \`action\` for route "${routeId}", so there is no way to handle the ` + `request.`);
  }

  let result;

  try {
    result = await routeModule.action({
      request,
      context,
      params
    });
  } catch (error) {
    if (!isResponse(error)) {
      throw error;
    }

    if (!isRedirectResponse(error)) {
      error.headers.set("X-Remix-Catch", "yes");
    }

    result = error;
  }

  if (result === undefined) {
    throw new Error(`You defined an action for route "${routeId}" but didn't return ` + `anything from your \`action\` function. Please return a value or \`null\`.`);
  }

  return isResponse(result) ? result : responses.json(result);
}
function isCatchResponse(value) {
  return isResponse(value) && value.headers.get("X-Remix-Catch") != null;
}

function isResponse(value) {
  return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}

const redirectStatusCodes = new Set([301, 302, 303, 307, 308]);
function isRedirectResponse(response) {
  return redirectStatusCodes.has(response.status);
}
function extractData(response) {
  let contentType = response.headers.get("Content-Type");

  if (contentType && /\bapplication\/json\b/.test(contentType)) {
    return response.json();
  } // What other data types do we need to handle here? What other kinds of
  // responses are people going to be returning from their loaders?
  // - application/x-www-form-urlencoded ?
  // - multipart/form-data ?
  // - binary (audio/video) ?


  return response.text();
}

exports.callRouteAction = callRouteAction;
exports.extractData = extractData;
exports.isCatchResponse = isCatchResponse;
exports.isRedirectResponse = isRedirectResponse;
exports.loadRouteData = loadRouteData;
